{-# OPTIONS --cubical --no-import-sorts --safe #-}
module Cubical.DStructures.XModule where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism
open import Cubical.Functions.FunExtEquiv

open import Cubical.Homotopy.Base

open import Cubical.Data.Sigma

open import Cubical.Relation.Binary
open BinaryRelation

open import Cubical.Structures.Group
open import Cubical.Structures.LeftAction

open import Cubical.DStructures.Base
open import Cubical.DStructures.Properties
open import Cubical.DStructures.Product
open import Cubical.DStructures.Combine
open import Cubical.DStructures.Type
open import Cubical.DStructures.Group
open import Cubical.DStructures.Action

module _ (‚Ñì ‚Ñì' : Level) where
  open Groups
  open Morphisms ‚Ñì ‚Ñì'
  open Action ‚Ñì ‚Ñì'

  module _ {G : Group {‚Ñì}} {H : Group {‚Ñì'}}
           (_Œ±_ : LeftActionStructure ‚ü® G ‚ü© ‚ü® H ‚ü©)
           (f : GroupHom H G) where
    f* = GroupHom.fun f
    _+G_ = Group._+_ G
    -G_  = Group.-_ G
    setG = Group.is-set G
    _+H_ = Group._+_ H
    -H_  = Group.-_ H
    setH = Group.is-set H

    isEquivariant : Type (‚Ñì-max ‚Ñì ‚Ñì')
    isEquivariant = (g : ‚ü® G ‚ü©) ‚Üí (h : ‚ü® H ‚ü©) ‚Üí f* (g Œ± h) ‚â° (g +G (f* h)) +G (-G g)

    isPropIsEquivariant : isProp isEquivariant
    isPropIsEquivariant = isPropŒ†2 (Œª g h ‚Üí setG (f* (g Œ± h)) ((g +G (f* h)) +G (-G g)))

    isPeiffer : Type _
    isPeiffer = (h h' : ‚ü® H ‚ü©) ‚Üí (f* h) Œ± h' ‚â° (h +H h') +H (-H h)

    isPropIsPeiffer : isProp isPeiffer
    isPropIsPeiffer = isPropŒ†2 (Œª h h' ‚Üí setH ((f* h) Œ± h') ((h +H h') +H (-H h)))

  G¬≤ActB = Œ£[ (((G , H) , _Œ±_) , isAct) ‚àà G¬≤Act ] (GroupHom H G)
  G¬≤ActBEqui = Œ£[ (((GH , _Œ±_) , isAct ) , f) ‚àà G¬≤ActB ] (isEquivariant _Œ±_ f)
  PreXModuleŒ£ = G¬≤ActBEqui
  G¬≤ActBEquiPeif = Œ£[ ((((GH , _Œ±_) , isAct) , f) , isEqui) ‚àà G¬≤ActBEqui ] (isPeiffer _Œ±_ f)
  XModuleŒ£ = G¬≤ActBEquiPeif

  -- displayed over SAction, a morphism back
  S·¥∞PreXModuleStr : URGStr·¥∞ SAction
                           (Œª (((G , H) , _) , _) ‚Üí GroupHom H G)
                           (‚Ñì-max ‚Ñì ‚Ñì')
  S·¥∞PreXModuleStr = make-ùíÆ·¥∞ (Œª {(((G , H) , _Œ±_) , isAct) } {_Œ±'_} f (((eG , eH) , eLas) , eIsAct) f'
                                   ‚Üí let trEG = GroupEquiv.eq eG .fst
                                         trEH = GroupEquiv.eq eH .fst
                                         f* = GroupHom.fun f
                                         f'* = GroupHom.fun f'
                                     in (h : ‚ü® H ‚ü©) ‚Üí trEG (f* h) ‚â° f'* (trEH h))
                                (Œª _ _ ‚Üí refl)
                                Œª (((G , H) , _Œ±_) , isAct) f
                                  ‚Üí isOfHLevelRespectEquiv 0
                                                           (Œ£-cong-equiv-snd (Œª f' ‚Üí isoToEquiv (invIso (GroupMorphismExtIso f f'))))
                                                           (isContrSingl f)

  SPreXModuleStr : URGStr G¬≤ActB (‚Ñì-max ‚Ñì ‚Ñì')
  SPreXModuleStr = ‚à´‚ü® SAction ‚ü© S·¥∞PreXModuleStr


  -- add equivariance condition
  S·¥∞PreXModule : URGStr·¥∞ SPreXModuleStr
                         (Œª (((GH , _Œ±_) , isAct) , f) ‚Üí isEquivariant _Œ±_ f)
                         ‚Ñì-zero
  S·¥∞PreXModule = Subtype‚ÜíSub-ùíÆ·¥∞ (Œª (((GH , _Œ±_) , isAct) , f)
                                    ‚Üí isEquivariant _Œ±_ f , isPropIsEquivariant _Œ±_ f)
                                 SPreXModuleStr

  SPreXModule : URGStr G¬≤ActBEqui (‚Ñì-max ‚Ñì ‚Ñì')
  SPreXModule = ‚à´‚ü® SPreXModuleStr ‚ü© S·¥∞PreXModule

  S·¥∞XModule : URGStr·¥∞ SPreXModule
                      (Œª (((((G , H) , _Œ±_) , isAct) , f) , isEqui)
                        ‚Üí isPeiffer _Œ±_ f)
                      ‚Ñì-zero
  S·¥∞XModule = Subtype‚ÜíSub-ùíÆ·¥∞ (Œª (((((G , H) , _Œ±_) , isAct) , f) , isEqui)
                                 ‚Üí isPeiffer _Œ±_ f , isPropIsPeiffer _Œ±_ f)
                              SPreXModule

  SXModule : URGStr G¬≤ActBEquiPeif (‚Ñì-max ‚Ñì ‚Ñì')
  SXModule = ‚à´‚ü® SPreXModule ‚ü© S·¥∞XModule
