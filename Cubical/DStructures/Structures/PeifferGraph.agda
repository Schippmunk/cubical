{-# OPTIONS --cubical --no-import-sorts --safe #-}
module Cubical.DStructures.Structures.PeifferGraph where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism
open import Cubical.Functions.FunExtEquiv

open import Cubical.Homotopy.Base

open import Cubical.Data.Sigma

open import Cubical.Relation.Binary


open import Cubical.Structures.Group
open import Cubical.Structures.LeftAction

open import Cubical.DStructures.Base
open import Cubical.DStructures.Meta.Properties
open import Cubical.DStructures.Structures.Constant
open import Cubical.DStructures.Meta.Combine
open import Cubical.DStructures.Structures.Type
open import Cubical.DStructures.Structures.Group

open GroupLemmas
open MorphismLemmas

module _ {‚Ñì ‚Ñì' : Level} where
  private
    ‚Ñì‚Ñì' = ‚Ñì-max ‚Ñì ‚Ñì'
  module _ {G‚ÇÄ : Group {‚Ñì}} {G‚ÇÅ : Group {‚Ñì'}}
           (Œπ : GroupHom G‚ÇÄ G‚ÇÅ) (œÉ : GroupHom G‚ÇÅ G‚ÇÄ) (œÑ : GroupHom G‚ÇÅ G‚ÇÄ) where
         open GroupNotation‚ÇÅ G‚ÇÅ

         private
           ùíæ = GroupHom.fun Œπ
           s = GroupHom.fun œÉ
           t = GroupHom.fun œÑ
           Œπ‚àòœÉ : GroupHom G‚ÇÅ G‚ÇÅ
           Œπ‚àòœÉ = compGroupHom œÉ Œπ
           Œπ‚àòœÑ : GroupHom G‚ÇÅ G‚ÇÅ
           Œπ‚àòœÑ = compGroupHom œÑ Œπ
           is = Œª (h : ‚ü® G‚ÇÅ ‚ü©) ‚Üí ùíæ (s h)
           -is = Œª (h : ‚ü® G‚ÇÅ ‚ü©) ‚Üí -‚ÇÅ ùíæ (s h)
           it = Œª (h : ‚ü® G‚ÇÅ ‚ü©) ‚Üí ùíæ (t h)
           -it = Œª (h : ‚ü® G‚ÇÅ ‚ü©) ‚Üí -‚ÇÅ ùíæ (t h)

         isPeifferGraph : Type ‚Ñì'
         isPeifferGraph = (a b : ‚ü® G‚ÇÅ ‚ü©) ‚Üí (((is b) +‚ÇÅ (a +‚ÇÅ (-it a))) +‚ÇÅ ((-is b) +‚ÇÅ b)) +‚ÇÅ (it a) ‚â° b +‚ÇÅ a

         isPropIsPeifferGraph : isProp isPeifferGraph
         isPropIsPeifferGraph = isPropŒ†2 (Œª a b ‚Üí set‚ÇÅ ((((is b) +‚ÇÅ (a +‚ÇÅ (-it a))) +‚ÇÅ ((-is b) +‚ÇÅ b)) +‚ÇÅ (it a)) (b +‚ÇÅ a))


         -- peiffer graph lemmas
         module _ (isPeifferG : isPeifferGraph) where
           abstract
             isPeifferGraph2 : (a b : ‚ü® G‚ÇÅ ‚ü©) ‚Üí (a -‚ÇÅ (it a)) +‚ÇÅ ((-‚ÇÅ (is b)) +‚ÇÅ b) ‚â° ((-‚ÇÅ (is b)) +‚ÇÅ (b +‚ÇÅ a)) -‚ÇÅ (it a)
             isPeifferGraph2 a b = (a -‚ÇÅ ita) +‚ÇÅ (-isb +‚ÇÅ b)
                                      ‚â°‚ü® sym (lCancel-lId G‚ÇÅ isb ((a -‚ÇÅ ita) +‚ÇÅ (-isb +‚ÇÅ b)))
                                         ‚àô sym (rCancel-rId G‚ÇÅ ((-isb +‚ÇÅ isb) +‚ÇÅ ((a -‚ÇÅ ita) +‚ÇÅ (-isb +‚ÇÅ b))) ita) ‚ü©
                                   ((-isb +‚ÇÅ isb) +‚ÇÅ ((a -‚ÇÅ ita) +‚ÇÅ (-isb +‚ÇÅ b))) +‚ÇÅ (ita -‚ÇÅ ita)
                                      ‚â°‚ü® assoc‚ÇÅ ((-isb +‚ÇÅ isb) +‚ÇÅ ((a -‚ÇÅ ita) +‚ÇÅ (-isb +‚ÇÅ b))) ita -ita ‚ü©
                                   (((-isb +‚ÇÅ isb) +‚ÇÅ ((a -‚ÇÅ ita) +‚ÇÅ (-isb +‚ÇÅ b))) +‚ÇÅ ita) +‚ÇÅ -ita
                                      ‚â°‚ü® cong (Œª z ‚Üí (z +‚ÇÅ ita) +‚ÇÅ -ita)
                                              (sym (assoc‚ÇÅ -isb isb _)) ‚ü©
                                   ((-isb +‚ÇÅ (isb +‚ÇÅ ((a -‚ÇÅ ita) +‚ÇÅ (-isb +‚ÇÅ b)))) +‚ÇÅ ita) +‚ÇÅ -ita
                                      ‚â°‚ü® cong (Œª z ‚Üí ((-isb +‚ÇÅ z) +‚ÇÅ ita) +‚ÇÅ -ita)
                                              (assoc‚ÇÅ _ _ _) ‚ü©
                                   ((-isb +‚ÇÅ ((isb +‚ÇÅ (a -‚ÇÅ ita)) +‚ÇÅ (-isb +‚ÇÅ b))) +‚ÇÅ ita) +‚ÇÅ -ita
                                      ‚â°‚ü® cong (_+‚ÇÅ -ita)
                                              (sym (assoc‚ÇÅ -isb _ ita)) ‚ü©
                                   (-isb +‚ÇÅ (((isb +‚ÇÅ (a -‚ÇÅ ita)) +‚ÇÅ (-isb +‚ÇÅ b)) +‚ÇÅ ita)) -‚ÇÅ ita
                                     ‚â°‚ü® cong (Œª z ‚Üí (-isb +‚ÇÅ z) -‚ÇÅ ita)
                                             (isPeifferG a b) ‚ü©
                                   (-isb +‚ÇÅ (b +‚ÇÅ a)) -‚ÇÅ ita ‚àé
                                   where
                                     -a = -‚ÇÅ a
                                     -ita = -‚ÇÅ (it a)
                                     ita = it a
                                     isb = is b
                                     -isb = -‚ÇÅ isb
                                     -b = -‚ÇÅ b

             isPeifferGraph3 : (a b : ‚ü® G‚ÇÅ ‚ü©) ‚Üí (-‚ÇÅ b) +‚ÇÅ ((is b) +‚ÇÅ ((it a) -‚ÇÅ a)) ‚â° (it a) +‚ÇÅ ((-‚ÇÅ a) +‚ÇÅ ((-‚ÇÅ b) +‚ÇÅ (is b)))
             isPeifferGraph3 a b = -b +‚ÇÅ (isb +‚ÇÅ (ita -‚ÇÅ a))
                                      ‚â°‚ü® cong (Œª z ‚Üí -b +‚ÇÅ (z +‚ÇÅ (ita -‚ÇÅ a)))
                                              (sym (invInvo G‚ÇÅ isb))
                                         ‚àô cong (Œª z ‚Üí -b +‚ÇÅ ((-‚ÇÅ -isb) +‚ÇÅ (z -‚ÇÅ a)))
                                                (sym (invInvo G‚ÇÅ ita)) ‚ü©
                                   -b +‚ÇÅ ((-‚ÇÅ -isb) +‚ÇÅ ((-‚ÇÅ -ita) -‚ÇÅ a))
                                      ‚â°‚ü® sym (invDistr‚ÇÑ G‚ÇÅ a -ita -isb b) ‚ü©
                                   -‚ÇÅ (((a +‚ÇÅ -ita) +‚ÇÅ -isb) +‚ÇÅ b)
                                      ‚â°‚ü® cong -‚ÇÅ_ (sym (assoc‚ÇÅ _ -isb b)) ‚ü©
                                   -‚ÇÅ ((a -‚ÇÅ ita) +‚ÇÅ (-isb +‚ÇÅ b))
                                     ‚â°‚ü® cong -‚ÇÅ_ (isPeifferGraph2 a b) ‚ü©
                                   -‚ÇÅ ((-isb +‚ÇÅ (b +‚ÇÅ a)) -‚ÇÅ ita)
                                     ‚â°‚ü® cong (Œª z ‚Üí -‚ÇÅ (z -‚ÇÅ ita)) (assoc‚ÇÅ -isb b a) ‚ü©
                                   -‚ÇÅ (((-isb +‚ÇÅ b) +‚ÇÅ a) -‚ÇÅ ita)
                                     ‚â°‚ü® invDistr‚ÇÑ G‚ÇÅ -isb b a -ita ‚ü©
                                   (-‚ÇÅ -ita) +‚ÇÅ (-a +‚ÇÅ (-b +‚ÇÅ (-‚ÇÅ -isb)))
                                     ‚â°‚ü® cong (_+‚ÇÅ (-a +‚ÇÅ (-b +‚ÇÅ (-‚ÇÅ -isb))))
                                             (invInvo G‚ÇÅ ita)
                                        ‚àô cong (Œª z ‚Üí ita +‚ÇÅ (-a +‚ÇÅ (-b +‚ÇÅ z)))
                                               (invInvo G‚ÇÅ isb) ‚ü©
                                   ita +‚ÇÅ (-a +‚ÇÅ (-b +‚ÇÅ isb)) ‚àé
                                   where
                                     -a = -‚ÇÅ a
                                     -ita = -‚ÇÅ (it a)
                                     ita = it a
                                     isb = is b
                                     -isb = -‚ÇÅ isb
                                     -b = -‚ÇÅ b

             isPeifferGraph4 : (a b : ‚ü® G‚ÇÅ ‚ü©) ‚Üí b +‚ÇÅ ((-‚ÇÅ (is b)) +‚ÇÅ ((-‚ÇÅ (it a)) +‚ÇÅ a)) ‚â° (-‚ÇÅ (it a)) +‚ÇÅ (a +‚ÇÅ (b -‚ÇÅ (is b)))
             isPeifferGraph4 a b = b +‚ÇÅ (-isb +‚ÇÅ (-ita +‚ÇÅ a))
                                     ‚â°‚ü® cong (_+‚ÇÅ (-isb +‚ÇÅ (-ita +‚ÇÅ a)))
                                             (sym (invInvo G‚ÇÅ b)) ‚ü©
                                   (-‚ÇÅ -b) +‚ÇÅ (-isb +‚ÇÅ (-ita +‚ÇÅ a))
                                     ‚â°‚ü® cong (Œª z ‚Üí (-‚ÇÅ -b) +‚ÇÅ (-isb +‚ÇÅ (-ita +‚ÇÅ z)))
                                             (sym (invInvo G‚ÇÅ a)) ‚ü©
                                   (-‚ÇÅ -b) +‚ÇÅ (-isb +‚ÇÅ (-ita -‚ÇÅ -a))
                                     ‚â°‚ü® cong (Œª z ‚Üí (-‚ÇÅ -b) +‚ÇÅ (-isb +‚ÇÅ (z -‚ÇÅ -a))) (sym (mapInv Œπ‚àòœÑ a)) ‚ü©
                                   (-‚ÇÅ -b) +‚ÇÅ (-isb +‚ÇÅ ((it -a) -‚ÇÅ -a))
                                     ‚â°‚ü® cong (Œª z ‚Üí (-‚ÇÅ -b) +‚ÇÅ (z +‚ÇÅ ((it -a) -‚ÇÅ -a))) (sym (mapInv Œπ‚àòœÉ b)) ‚ü©
                                   (-‚ÇÅ -b) +‚ÇÅ (is -b +‚ÇÅ ((it -a) -‚ÇÅ -a))
                                     ‚â°‚ü® isPeifferGraph3 -a -b ‚ü©
                                   it -a +‚ÇÅ ((-‚ÇÅ -a) +‚ÇÅ ((-‚ÇÅ -b) +‚ÇÅ is -b))
                                     ‚â°‚ü® cong (_+‚ÇÅ ((-‚ÇÅ -a) +‚ÇÅ ((-‚ÇÅ -b) +‚ÇÅ is -b)))
                                             (mapInv Œπ‚àòœÑ a) ‚ü©
                                   -ita +‚ÇÅ ((-‚ÇÅ -a) +‚ÇÅ ((-‚ÇÅ -b) +‚ÇÅ is -b))
                                     ‚â°‚ü® cong (Œª z ‚Üí -ita +‚ÇÅ (z +‚ÇÅ ((-‚ÇÅ -b) +‚ÇÅ is -b)))
                                             (invInvo G‚ÇÅ a) ‚ü©
                                   -ita +‚ÇÅ (a +‚ÇÅ ((-‚ÇÅ -b) +‚ÇÅ is -b))
                                     ‚â°‚ü® cong (Œª z ‚Üí -ita +‚ÇÅ (a +‚ÇÅ (z +‚ÇÅ is -b)))
                                             (invInvo G‚ÇÅ b) ‚ü©
                                   -ita +‚ÇÅ (a +‚ÇÅ (b +‚ÇÅ is -b))
                                     ‚â°‚ü® cong (Œª z ‚Üí -ita +‚ÇÅ (a +‚ÇÅ (b +‚ÇÅ z)))
                                             (mapInv Œπ‚àòœÉ b) ‚ü©
                                   -ita +‚ÇÅ (a +‚ÇÅ (b -‚ÇÅ isb)) ‚àé
                                   where
                                     -a = -‚ÇÅ a
                                     -ita = -‚ÇÅ (it a)
                                     isb = is b
                                     -isb = -‚ÇÅ isb
                                     -b = -‚ÇÅ b


module _ (‚Ñì ‚Ñì' : Level) where
  private
    ‚Ñì‚Ñì' = ‚Ñì-max ‚Ñì ‚Ñì'

  ùíÆ·¥∞-ReflGraph\Peiffer : URGStr·¥∞ (ùíÆ-ReflGraph ‚Ñì ‚Ñì‚Ñì')
                           (Œª (((((G , H) , f , b) , isRet) , b') , isRet') ‚Üí isPeifferGraph f b b')
                           ‚Ñì-zero
  ùíÆ·¥∞-ReflGraph\Peiffer = Subtype‚ÜíSub-ùíÆ·¥∞ (Œª (((((G , H) , f , b) , isRet) , b') , isRet')
                                           ‚Üí isPeifferGraph f b b' , isPropIsPeifferGraph f b b')
                                        (ùíÆ-ReflGraph ‚Ñì ‚Ñì‚Ñì')

  PeifferGraph : Type (‚Ñì-suc ‚Ñì‚Ñì')
  PeifferGraph = Œ£[ (((((G‚ÇÄ , G‚ÇÅ) , Œπ , œÉ) , split-œÉ) , œÑ) , split-œÑ) ‚àà ReflGraph ‚Ñì ‚Ñì‚Ñì' ] isPeifferGraph Œπ œÉ œÑ

  ùíÆ-PeifferGraph : URGStr PeifferGraph ‚Ñì‚Ñì'
  ùíÆ-PeifferGraph = ‚à´‚ü® ùíÆ-ReflGraph ‚Ñì ‚Ñì‚Ñì' ‚ü© ùíÆ·¥∞-ReflGraph\Peiffer
