{-# OPTIONS --cubical --no-import-sorts --safe #-}
module Cubical.DStructures.Experiments where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Univalence

open import Cubical.Functions.FunExtEquiv

open import Cubical.Homotopy.Base

open import Cubical.Data.Sigma

open import Cubical.Relation.Binary
open BinaryRelation

open import Cubical.Structures.Subtype
open import Cubical.Structures.Group
open import Cubical.Structures.LeftAction
open import Cubical.Structures.Group.Semidirect

open import Cubical.DStructures.Base
open import Cubical.DStructures.Properties
open import Cubical.DStructures.Product
open import Cubical.DStructures.Combine
open import Cubical.DStructures.Type
open import Cubical.DStructures.Group
open import Cubical.DStructures.Isomorphism
open import Cubical.DStructures.Strict2Group
open import Cubical.DStructures.XModule

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ' ‚Ñì‚ÇÅ'' ‚Ñì‚ÇÇ ‚ÑìA ‚ÑìA' ‚Ñì‚âÖA ‚Ñì‚âÖA' ‚ÑìB ‚ÑìB' ‚Ñì‚âÖB ‚ÑìC ‚Ñì‚âÖC ‚Ñì‚âÖ·¥∞ ‚Ñì‚âÖ·¥∞' : Level

module _ {‚Ñì : Level} (G‚ÇÄ : Group {‚Ñì}) (‚Ñì' : Level) where
  private
    ‚Ñì‚Ñì' = ‚Ñì-max ‚Ñì ‚Ñì'

  SplitExt : Type (‚Ñì-suc ‚Ñì‚Ñì')
  SplitExt = Œ£[ G‚ÇÅ ‚àà Group {‚Ñì‚Ñì'} ] Œ£[ Œπ ‚àà GroupHom G‚ÇÄ G‚ÇÅ ] Œ£[ œÉ ‚àà GroupHom G‚ÇÅ G‚ÇÄ ] isGroupHomRet Œπ œÉ

  GroupAct : Type (‚Ñì-suc ‚Ñì‚Ñì')
  GroupAct = Œ£[ G‚ÇÅ ‚àà Group {‚Ñì‚Ñì'} ] Œ£[ _Œ±_ ‚àà LeftActionStructure ‚ü® G‚ÇÄ ‚ü© ‚ü® G‚ÇÅ ‚ü© ] (IsGroupAction G‚ÇÄ G‚ÇÅ _Œ±_)

  SplitExt‚ÜíGroupAct : SplitExt ‚Üí GroupAct
  SplitExt‚ÜíGroupAct (G‚ÇÅ , Œπ , œÉ , isSplit) = ker-œÉ , _Œ±_ , isAct
    where
      open Kernel
      open GroupNotation‚ÇÄ G‚ÇÄ
      open GroupNotation‚ÇÅ G‚ÇÅ
      open GroupHom
      open MorphismLemmas
      open IsGroupAction
      open GroupLemmas

      ker-œÉ : Group {‚Ñì‚Ñì'}
      ker-œÉ = ker œÉ

      _+‚Çñ_ = ker-œÉ ._+_

      _Œ±_ : LeftActionStructure ‚ü® G‚ÇÄ ‚ü© ‚ü® ker-œÉ ‚ü©
      _Œ±_ g (h , p) = (ig +‚ÇÅ h) +‚ÇÅ (-‚ÇÅ ig) , q
        where
          ig = Œπ .fun g
          s = œÉ .fun
          abstract
            q = s ((ig +‚ÇÅ h) +‚ÇÅ (-‚ÇÅ ig))
                  ‚â°‚ü® œÉ .isHom (ig +‚ÇÅ h) (-‚ÇÅ ig) ‚ü©
                (s (ig +‚ÇÅ h)) +‚ÇÄ s (-‚ÇÅ ig)
                   ‚â°‚ü® cong (s (ig +‚ÇÅ h) +‚ÇÄ_) (mapInv œÉ ig) ‚ü©
                (s (ig +‚ÇÅ h)) +‚ÇÄ (-‚ÇÄ (s ig))
                   ‚â°‚ü® cong (_+‚ÇÄ -‚ÇÄ (s ig)) (œÉ .isHom ig h) ‚ü©
                ((s ig) +‚ÇÄ (s h)) +‚ÇÄ (-‚ÇÄ (s ig))
                    ‚â°‚ü® cong (Œª z ‚Üí ((s ig) +‚ÇÄ z) +‚ÇÄ (-‚ÇÄ (s ig))) p ‚ü©
                ((s ig) +‚ÇÄ 0‚ÇÄ) +‚ÇÄ (-‚ÇÄ (s ig))
                    ‚â°‚ü® cong (_+‚ÇÄ -‚ÇÄ (s ig)) (rId‚ÇÄ (s ig)) ‚ü©
                (s ig) +‚ÇÄ (-‚ÇÄ (s ig))
                   ‚â°‚ü® rCancel‚ÇÄ (s ig) ‚ü©
                0‚ÇÄ ‚àé

      isAct : IsGroupAction G‚ÇÄ ker-œÉ _Œ±_
      abstract
        -- (g Œ± (ker-œÉ Group.+ h) h') ‚â° (ker-œÉ Group.+ (g Œ± h)) (g Œ± h')
        isAct .isHom g (h , p) (h' , p') = subtypeWitnessIrrelevance (sg-typeProp œÉ) q
          where
            ig = Œπ .fun g
            -ig = -‚ÇÅ ig
            s = œÉ .fun
            abstract
              q = fst (g Œ± ((h , p) +‚Çñ (h' , p')))
                      ‚â°‚ü® refl ‚ü©
                  (ig +‚ÇÅ (h +‚ÇÅ h')) +‚ÇÅ (-‚ÇÅ ig)
                      ‚â°‚ü® cong (Œª z ‚Üí (ig +‚ÇÅ (z +‚ÇÅ h')) +‚ÇÅ (-‚ÇÅ ig)) ((sym (rId‚ÇÅ h)) ‚àô (cong (h +‚ÇÅ_) (sym (lCancel‚ÇÅ ig)))) ‚ü©
                  (ig +‚ÇÅ ((h +‚ÇÅ (-ig +‚ÇÅ ig)) +‚ÇÅ h')) +‚ÇÅ -ig
                      ‚â°‚ü® cong (Œª z ‚Üí (ig +‚ÇÅ (z +‚ÇÅ h')) +‚ÇÅ -ig) (assoc‚ÇÅ h -ig ig) ‚ü©
                  (ig +‚ÇÅ (((h +‚ÇÅ -ig) +‚ÇÅ ig) +‚ÇÅ h')) +‚ÇÅ -ig
                      ‚â°‚ü® cong (Œª z ‚Üí (ig +‚ÇÅ z) +‚ÇÅ -ig) (sym (assoc‚ÇÅ (h +‚ÇÅ -ig) ig h')) ‚ü©
                  (ig +‚ÇÅ ((h +‚ÇÅ -ig) +‚ÇÅ (ig +‚ÇÅ h'))) +‚ÇÅ -ig
                      ‚â°‚ü® cong (_+‚ÇÅ -ig) (assoc‚ÇÅ ig (h +‚ÇÅ -ig) (ig +‚ÇÅ h')) ‚ü©
                  ((ig +‚ÇÅ (h +‚ÇÅ -ig)) +‚ÇÅ (ig +‚ÇÅ h')) +‚ÇÅ -ig
                      ‚â°‚ü® cong (Œª z ‚Üí (z +‚ÇÅ (ig +‚ÇÅ h')) +‚ÇÅ -ig) (assoc‚ÇÅ ig h -ig) ‚ü©
                  (((ig +‚ÇÅ h) +‚ÇÅ -ig) +‚ÇÅ (ig +‚ÇÅ h')) +‚ÇÅ -ig
                      ‚â°‚ü® sym (assoc‚ÇÅ ((ig +‚ÇÅ h) +‚ÇÅ -ig) (ig +‚ÇÅ h') -ig) ‚ü©
                  ((ig +‚ÇÅ h) +‚ÇÅ -ig) +‚ÇÅ ((ig +‚ÇÅ h') +‚ÇÅ -ig)
                      ‚â°‚ü® refl ‚ü©
                  fst ((g Œ± (h , p)) +‚Çñ (g Œ± (h' , p'))) ‚àé
        isAct .identity (h , p) = subtypeWitnessIrrelevance (sg-typeProp œÉ) q
          where
            abstract
              q = fst (0‚ÇÄ Œ± (h , p))
                    ‚â°‚ü® cong (Œª z ‚Üí (z +‚ÇÅ h) +‚ÇÅ (-‚ÇÅ z)) (mapId Œπ) ‚ü©
                  (0‚ÇÅ +‚ÇÅ h) +‚ÇÅ (-‚ÇÅ 0‚ÇÅ)
                    ‚â°‚ü® (cong ((0‚ÇÅ +‚ÇÅ h) +‚ÇÅ_) (invId G‚ÇÅ)) ‚àô‚àô rId‚ÇÅ (0‚ÇÅ +‚ÇÅ h) ‚àô‚àô lId‚ÇÅ h ‚ü©
                  h ‚àé
        -- (g +‚ÇÄ g') Œ± h ‚â° g Œ± (g' Œ± h)
        isAct .assoc g g' (h , p) = subtypeWitnessIrrelevance (sg-typeProp œÉ) q
          where
            ig = Œπ .fun g
            ig' = Œπ .fun g'
            -ig = -‚ÇÅ ig
            -ig' = -‚ÇÅ ig'
            abstract
              q = (Œπ .fun (g +‚ÇÄ g') +‚ÇÅ h) +‚ÇÅ (-‚ÇÅ (Œπ .fun (g +‚ÇÄ g')))
                     ‚â°‚ü® cong (Œª z ‚Üí (z +‚ÇÅ h) +‚ÇÅ (-‚ÇÅ z)) (Œπ .isHom g g') ‚ü©
                  ((ig +‚ÇÅ ig') +‚ÇÅ h) +‚ÇÅ (-‚ÇÅ (ig +‚ÇÅ ig'))
                     ‚â°‚ü® cong (((ig +‚ÇÅ ig') +‚ÇÅ h) +‚ÇÅ_) (invDistr G‚ÇÅ ig ig') ‚ü©
                  ((ig +‚ÇÅ ig') +‚ÇÅ h) +‚ÇÅ (-ig' +‚ÇÅ -ig)
                    ‚â°‚ü® cong (_+‚ÇÅ (-ig' +‚ÇÅ -ig)) (sym (assoc‚ÇÅ ig ig' h)) ‚ü©
                  (ig +‚ÇÅ (ig' +‚ÇÅ h)) +‚ÇÅ (-ig' +‚ÇÅ -ig)
                    ‚â°‚ü® assoc‚ÇÅ (ig +‚ÇÅ (ig' +‚ÇÅ h)) -ig' -ig ‚ü©
                  ((ig +‚ÇÅ (ig' +‚ÇÅ h)) +‚ÇÅ -ig') +‚ÇÅ -ig
                    ‚â°‚ü® cong (_+‚ÇÅ -ig) (sym (assoc‚ÇÅ ig (ig' +‚ÇÅ h) -ig')) ‚ü©
                  fst (g Œ± (g' Œ± (h , p))) ‚àé

  GroupAct‚ÜíSplitExt : GroupAct ‚Üí SplitExt
  GroupAct‚ÜíSplitExt (G‚ÇÅ , _Œ±_ , isAct) = G‚ÇÅ‚ãäG‚ÇÄ , Œπ‚ÇÇ Œ± , œÄ‚ÇÇ Œ± , œÄ‚ÇÇ-hasSec Œ±
    where
      Œ± = groupaction _Œ±_ isAct
      G‚ÇÅ‚ãäG‚ÇÄ : Group {‚Ñì‚Ñì'}
      G‚ÇÅ‚ãäG‚ÇÄ = G‚ÇÅ ‚ãä‚ü® Œ± ‚ü© G‚ÇÄ

module _ (‚Ñì ‚Ñì' : Level) where
  private
    ‚Ñì‚Ñì' = ‚Ñì-max ‚Ñì ‚Ñì'

  ReflexiveGraph = Œ£[ (G‚ÇÄ , G‚ÇÅ , Œπ , œÉ , split-œÉ) ‚àà (Œ£[ G‚ÇÄ ‚àà Group {‚Ñì} ] SplitExt G‚ÇÄ ‚Ñì') ] Œ£[ œÑ ‚àà GroupHom G‚ÇÅ G‚ÇÄ ] isGroupHomRet Œπ œÑ

  PreCrossedModule = Œ£[ (G‚ÇÄ , G‚ÇÅ , _Œ±_ , isAct) ‚àà (Œ£[ G‚ÇÄ ‚àà Group {‚Ñì} ] GroupAct G‚ÇÄ ‚Ñì') ] (Œ£[ œÜ ‚àà GroupHom G‚ÇÅ G‚ÇÄ ] isEquivariant _Œ±_ œÜ)



-- Older Experiments --

{-
-- needs --guardedness flag

module _ where
  open import Cubical.Data.Maybe
  record Hierarchy {A : Type ‚Ñì} (ùíÆ-A : URGStr A ‚Ñì) : Type (‚Ñì-suc ‚Ñì) where
    coinductive
    field
      B : A ‚Üí Type ‚Ñì
      ùíÆ·¥∞-B : URGStr·¥∞ ùíÆ-A B ‚Ñì
      ‚Ñã : Maybe (Hierarchy {A = Œ£ A B} (‚à´‚ü® ùíÆ-A ‚ü© ùíÆ·¥∞-B))
-}
