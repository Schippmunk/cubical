{-# OPTIONS --cubical --no-import-sorts --safe --guardedness #-}
module Cubical.DStructures.Experiments where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Univalence

open import Cubical.Functions.FunExtEquiv

open import Cubical.Homotopy.Base

open import Cubical.Data.Sigma

open import Cubical.Relation.Binary
open BinaryRelation

open import Cubical.Structures.Group
open import Cubical.Structures.LeftAction

open import Cubical.DStructures.Base
open import Cubical.DStructures.Properties
open import Cubical.DStructures.Product
open import Cubical.DStructures.Combine
open import Cubical.DStructures.Type
open import Cubical.DStructures.Group
open import Cubical.DStructures.Isomorphism
open import Cubical.DStructures.Strict2Group
open import Cubical.DStructures.XModule

private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ' ‚Ñì‚ÇÅ'' ‚Ñì‚ÇÇ ‚ÑìA ‚ÑìA' ‚Ñì‚âÖA ‚Ñì‚âÖA' ‚ÑìB ‚ÑìB' ‚Ñì‚âÖB ‚ÑìC ‚Ñì‚âÖC ‚Ñì‚âÖ·¥∞ ‚Ñì‚âÖ·¥∞' : Level

module ActionNotationŒ± {N : Group {‚Ñì}} {H : Group {‚Ñì'}} (Act : GroupAction H N) where
  _Œ±_ = GroupAction._Œ±_ Act
  private
    isGroupAction = GroupAction.isGroupAction Act
  Œ±-id = IsGroupAction.identity isGroupAction
  Œ±-hom = IsGroupAction.isHom isGroupAction
  Œ±-assoc = IsGroupAction.assoc isGroupAction

module Semidirect where
  semidirectProd : (G : Group {‚Ñì}) (H : Group {‚Ñì'}) (Act : GroupAction H G)
                   ‚Üí Group {‚Ñì-max ‚Ñì ‚Ñì'}
  semidirectProd G H Act = makeGroup-left {A = sd-carrier} sd-0 _+sd_ -sd_ sd-set sd-assoc sd-lId sd-lCancel
    where
      open ActionNotationŒ± Act
      open GroupNotationG G
      open GroupNotationH H

      -- sd stands for semidirect
      sd-carrier = ‚ü® G ‚ü© √ó ‚ü® H ‚ü©
      sd-0 = 0·¥≥ , 0·¥¥

      module _ ((g , h) : sd-carrier) where
        -sd_ = (-·¥¥ h) Œ± (-·¥≥ g) , -·¥¥ h

        _+sd_ = Œª (g' , h') ‚Üí g +·¥≥ (h Œ± g') , h +·¥¥ h'

      abstract
        sd-set = isSetŒ£ set·¥≥ (Œª _ ‚Üí set·¥¥)
        sd-lId = Œª ((g , h) : sd-carrier) ‚Üí Œ£PathP (lId·¥≥ (0·¥¥ Œ± g) ‚àô (Œ±-id g) , lId·¥¥ h)
        sd-lCancel = Œª ((g , h) : sd-carrier) ‚Üí Œ£PathP ({!sym (Œ±-hom (-·¥¥ h) (-·¥≥ g) g) ‚àô‚àô cong ((-·¥¥ h) Œ±_) (lCancel·¥≥ g) ‚àô‚àô ?!} , lCancel·¥¥ h)

        sd-assoc = Œª (a , x) (b , y) (c , z) ‚Üí Œ£PathP ((a +·¥≥ (x Œ± (b  +·¥≥ (y Œ± c)))
                                    ‚â°‚ü® cong (a +·¥≥_) (Œ±-hom x b (y Œ± c)) ‚ü©
                                a +·¥≥ ((x Œ± b) +·¥≥ (x Œ± (y Œ± c)))
                                    ‚â°‚ü® assoc·¥≥ a (x Œ± b) (x Œ± (y Œ± c)) ‚ü©
                                (a +·¥≥ (x Œ± b)) +·¥≥ (x Œ± (y Œ± c))
                                    ‚â°‚ü® cong ((a +·¥≥ (x Œ± b)) +·¥≥_) (sym (Œ±-assoc x y c)) ‚ü©
                                (a +·¥≥ (x Œ± b)) +·¥≥ ((x +·¥¥ y) Œ± c) ‚àé) , assoc·¥¥ x y z)


{-
  semidirectProduct : (N : Group {‚Ñì}) (H : Group {‚Ñì'}) (Act : GroupAction H N)
                      ‚Üí Group {‚Ñì-max ‚Ñì ‚Ñì'}
  semidirectProduct N H Act
    = makeGroup-left {A = N .Carrier √ó H .Carrier} -- carrier
                     -- identity
                     (N .0g , H .0g)
                     -- _+_
                     (Œª (n , h) (n' , h') ‚Üí n +N (h Œ± n') , h +H h')
                     -- -_
                     (Œª (n , h) ‚Üí (-H h) Œ± (-N n) , -H h)
                     -- set
                     (isSetŒ£ (N .is-set) Œª _ ‚Üí H .is-set)
                     -- assoc
                     (Œª (a , x) (b , y) (c , z)
                       ‚Üí Œ£PathP ((a +N (x Œ± (b  +N (y Œ± c)))
                                    ‚â°‚ü® cong (a +N_) (Œ±-hom x b (y Œ± c)) ‚ü©
                                a +N ((x Œ± b) +N (x Œ± (y Œ± c)))
                                    ‚â°‚ü® assocN a (x Œ± b) (x Œ± (y Œ± c)) ‚ü©
                                (a +N (x Œ± b)) +N (x Œ± (y Œ± c))
                                    ‚â°‚ü® cong ((a +N (x Œ± b)) +N_) (sym (Œ±-assoc x y c)) ‚ü©
                                (a +N (x Œ± b)) +N ((x +H y) Œ± c) ‚àé) , H .assoc x y z))
                     -- lUnit
                     (Œª (n , h) ‚Üí Œ£PathP (lUnitN ((H .0g) Œ± n) ‚àô Œ±-id n , lUnitH h))
                     -- lCancel
                     Œª (n , h) ‚Üí Œ£PathP ((sym (Œ±-hom (-H h) (-N n) n) ‚àô‚àô cong ((-H h) Œ±_) (lCancelN n) ‚àô‚àô {!actg1‚â°1!}) ,  lCancelH h)
                     where
                       open GroupAction Act
                       open Group
                       _+N_ = N ._+_
                       _+H_ = H ._+_
                       -N_ = N .-_
                       -H_ = H .-_
                       lUnitH = IsGroup.lid (H .isGroup)
                       lUnitN = IsGroup.lid (N .isGroup)
                       lCancelH = IsGroup.invl (H .isGroup)
                       lCancelN = IsGroup.invl (N .isGroup)
                       assocN = IsGroup.assoc (N .isGroup)
                       Œ±-id = IsGroupAction.identity isGroupAction
                       Œ±-hom = IsGroupAction.isHom isGroupAction
                       Œ±-assoc = IsGroupAction.assoc isGroupAction

  syntax semidirectProduct N H Œ± = N ‚ãä‚ü® Œ± ‚ü© H

  module Projections {N : Group {‚Ñì}} {H : Group {‚Ñì'}} (Œ± : GroupAction H N) where
    œÄ‚ÇÅ : ‚ü® N ‚ãä‚ü® Œ± ‚ü© H ‚ü© ‚Üí ‚ü® N ‚ü©
    œÄ‚ÇÅ = fst

    Œπ‚ÇÅ : GroupHom N (N ‚ãä‚ü® Œ± ‚ü© H)
    Œπ‚ÇÅ = grouphom (Œª n ‚Üí n , Group.0g H) Œª n n' ‚Üí Œ£PathP {!!}

    œÄ‚ÇÇ : GroupHom (N ‚ãä‚ü® Œ± ‚ü© H) H
    œÄ‚ÇÇ = grouphom snd Œª _ _ ‚Üí refl

    Œπ‚ÇÇ : GroupHom H (N ‚ãä‚ü® Œ± ‚ü© H)
    Œπ‚ÇÇ = grouphom (Œª h ‚Üí Group.0g N , h) Œª h h' ‚Üí Œ£PathP ({!!} , refl)

    œÄ‚ÇÇ-hasSec : isGroupHomRet Œπ‚ÇÇ œÄ‚ÇÇ
    œÄ‚ÇÇ-hasSec = GroupMorphismExt (Œª _ ‚Üí refl)


module _ {‚Ñì : Level} (G‚ÇÄ : Group {‚Ñì}) (‚Ñì' : Level) where
  private
    ‚Ñì‚Ñì' = ‚Ñì-max ‚Ñì ‚Ñì'

  SplitExt : Type (‚Ñì-suc ‚Ñì‚Ñì')
  SplitExt = Œ£[ G‚ÇÅ ‚àà Group {‚Ñì‚Ñì'} ] Œ£[ Œπ ‚àà GroupHom G‚ÇÄ G‚ÇÅ ] Œ£[ œÉ ‚àà GroupHom G‚ÇÅ G‚ÇÄ ] isGroupHomRet Œπ œÉ

  GroupAct : Type (‚Ñì-suc ‚Ñì‚Ñì')
  GroupAct = Œ£[ G‚ÇÅ ‚àà Group {‚Ñì‚Ñì'} ] Œ£[ _Œ±_ ‚àà LeftActionStructure ‚ü® G‚ÇÄ ‚ü© ‚ü® G‚ÇÅ ‚ü© ] (IsGroupAction G‚ÇÄ G‚ÇÅ _Œ±_)

  SplitExt‚ÜíGroupAct : SplitExt ‚Üí GroupAct
  SplitExt‚ÜíGroupAct (G‚ÇÅ , Œπ , œÉ , isSplit) = ker-œÉ , _Œ±_ , isAct
    where
      open Kernel
      ker-œÉ : Group {‚Ñì‚Ñì'}
      ker-œÉ = ker œÉ
      _Œ±_ : LeftActionStructure ‚ü® G‚ÇÄ ‚ü© ‚ü® ker-œÉ ‚ü©
      _Œ±_ = {!!}
      isAct : IsGroupAction G‚ÇÄ ker-œÉ _Œ±_
      isAct = {!!}

  GroupAct‚ÜíSplitExt : GroupAct ‚Üí SplitExt
  GroupAct‚ÜíSplitExt (G‚ÇÅ , _Œ±_ , isAct) = G‚ÇÅ‚ãäG‚ÇÄ , Œπ‚ÇÇ Œ± , œÄ‚ÇÇ Œ± , œÄ‚ÇÇ-hasSec Œ±
    where
      open Semidirect
      open Projections
      Œ± = groupaction _Œ±_ isAct
      G‚ÇÅ‚ãäG‚ÇÄ : Group {‚Ñì‚Ñì'}
      G‚ÇÅ‚ãäG‚ÇÄ = G‚ÇÅ ‚ãä‚ü® Œ± ‚ü© G‚ÇÄ

module _ (‚Ñì ‚Ñì' : Level) where
  private
    ‚Ñì‚Ñì' = ‚Ñì-max ‚Ñì ‚Ñì'

  ReflexiveGraph = Œ£[ (G‚ÇÄ , G‚ÇÅ , Œπ , œÉ , split-œÉ) ‚àà (Œ£[ G‚ÇÄ ‚àà Group {‚Ñì} ] SplitExt G‚ÇÄ ‚Ñì') ] Œ£[ œÑ ‚àà GroupHom G‚ÇÅ G‚ÇÄ ] isGroupHomRet Œπ œÑ

  PreCrossedModule = Œ£[ (G‚ÇÄ , G‚ÇÅ , _Œ±_ , isAct) ‚àà (Œ£[ G‚ÇÄ ‚àà Group {‚Ñì} ] GroupAct G‚ÇÄ ‚Ñì') ] (Œ£[ œÜ ‚àà GroupHom G‚ÇÅ G‚ÇÄ ] isEquivariant _Œ±_ œÜ)
-}
{-
module _ where
  open import Cubical.Data.Maybe
  record Hierarchy {A : Type ‚Ñì} (ùíÆ-A : URGStr A ‚Ñì) : Type (‚Ñì-suc ‚Ñì) where
    coinductive
    field
      B : A ‚Üí Type ‚Ñì
      ùíÆ·¥∞-B : URGStr·¥∞ ùíÆ-A B ‚Ñì
      ‚Ñã : Maybe (Hierarchy {A = Œ£ A B} (‚à´‚ü® ùíÆ-A ‚ü© ùíÆ·¥∞-B))
-}
