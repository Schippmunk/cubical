{-# OPTIONS --cubical --no-import-sorts --safe #-}
module Cubical.DStructures.Equivalences.XModPeifferGraph where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Univalence

open import Cubical.Functions.FunExtEquiv

open import Cubical.Homotopy.Base

open import Cubical.Data.Sigma
open import Cubical.Data.Unit

open import Cubical.Relation.Binary


open import Cubical.Structures.Subtype
open import Cubical.Structures.Group
open import Cubical.Structures.LeftAction
open import Cubical.Structures.Group.Semidirect

open import Cubical.DStructures.Base
open import Cubical.DStructures.Meta.Properties
open import Cubical.DStructures.Meta.Combine
open import Cubical.DStructures.Meta.Isomorphism
open import Cubical.DStructures.Structures.Constant
open import Cubical.DStructures.Structures.Type
open import Cubical.DStructures.Structures.Group
open import Cubical.DStructures.Structures.Action
open import Cubical.DStructures.Structures.XModule
open import Cubical.DStructures.Structures.PeifferGraph
open import Cubical.DStructures.Equivalences.GroupSplitEpiAction
open import Cubical.DStructures.Equivalences.PreXModReflGraph


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì‚ÇÅ ‚Ñì‚ÇÅ' ‚Ñì‚ÇÅ'' ‚Ñì‚ÇÇ ‚ÑìA ‚ÑìA' ‚Ñì‚âÖA ‚Ñì‚âÖA' ‚ÑìB ‚ÑìB' ‚Ñì‚âÖB ‚ÑìC ‚Ñì‚âÖC ‚Ñì‚âÖ·¥∞ ‚Ñì‚âÖ·¥∞' ‚Ñì‚âÖB' : Level

open Kernel
open GroupHom -- such .fun!
open GroupLemmas
open MorphismLemmas
open ActionLemmas

module _ (‚Ñì ‚Ñì' : Level) where
  private
    ‚Ñì‚Ñì' = ‚Ñì-max ‚Ñì ‚Ñì'

    ‚Ñ± = IsoPreXModuleReflGraph ‚Ñì ‚Ñì‚Ñì'
    F = Iso.fun ‚Ñ±

    ùíÆ·¥∞-S2G = ùíÆ·¥∞-ReflGraph\Peiffer

    ùíÆ·¥∞-‚ô≠iso-XModule-Strict2Group : ùíÆ·¥∞-‚ô≠iso F (ùíÆ·¥∞-XModule ‚Ñì ‚Ñì‚Ñì') (ùíÆ·¥∞-S2G ‚Ñì ‚Ñì‚Ñì')
    RelIso.fun (ùíÆ·¥∞-‚ô≠iso-XModule-Strict2Group (((((G‚ÇÄ , H) , _Œ±_) , isAct) , œÜ) , isEqui)) isPeif a b = q
      where
        open GroupNotationH H
        open GroupNotation‚ÇÄ G‚ÇÄ
        f = GroupHom.fun œÜ
        A = groupaction _Œ±_ isAct
        open ActionNotationŒ± A using (Œ±-assoc ; Œ±-hom)

        SG = F (((((G‚ÇÄ , H) , _Œ±_) , isAct) , œÜ) , isEqui)
        -- H‚ãäG : Group {‚Ñì‚Ñì'}
        H‚ãäG = snd (fst (fst (fst (fst SG))))
        open GroupNotation‚ÇÅ H‚ãäG
        -- œÉ : GroupHom H‚ãäG G‚ÇÄ
        œÉ = snd (snd (fst (fst (fst SG))))
        -- Œπ : GroupHom G‚ÇÄ H‚ãäG
        Œπ = fst (snd (fst (fst (fst SG))))
        -- œÑ : GroupHom H‚ãäG G‚ÇÄ
        œÑ = snd (fst SG)
        t = GroupHom.fun œÑ
        s = GroupHom.fun œÉ
        ùíæ = GroupHom.fun Œπ
        is = Œª (h : ‚ü® H‚ãäG ‚ü©) ‚Üí ùíæ (s h)
        -is = Œª (h : ‚ü® H‚ãäG ‚ü©) ‚Üí -‚ÇÅ ùíæ (s h)
        it = Œª (h : ‚ü® H‚ãäG ‚ü©) ‚Üí ùíæ (t h)
        -it = Œª (h : ‚ü® H‚ãäG ‚ü©) ‚Üí -‚ÇÅ ùíæ (t h)
        u = fst a
        v = snd a
        x = fst b
        y = snd b
        abstract
          -- alright folks, let's do some simple arithmetic with a `twist`, that is Peiffer identities and equivariance
          r = ((0·¥¥ +·¥¥ (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥)))))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± (((-‚ÇÄ y) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ y) Œ± x)))) +·¥¥ (((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) +‚ÇÄ ((-‚ÇÄ y) +‚ÇÄ y)) Œ± 0·¥¥)
                ‚â°‚ü® cong (((0·¥¥ +·¥¥ (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥)))))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± (((-‚ÇÄ y) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ y) Œ± x)))) +·¥¥_) (actOnUnit A ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) +‚ÇÄ ((-‚ÇÄ y) +‚ÇÄ y))) ‚ü©
              ((0·¥¥ +·¥¥ (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥)))))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± (((-‚ÇÄ y) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ y) Œ± x)))) +·¥¥ 0·¥¥
                ‚â°‚ü® rId·¥¥ ((0·¥¥ +·¥¥ (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥)))))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± (((-‚ÇÄ y) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ y) Œ± x)))) ‚ü©
              (0·¥¥ +·¥¥ (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥)))))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± (((-‚ÇÄ y) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ y) Œ± x)))
                ‚â°‚ü® cong (_+·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± (((-‚ÇÄ y) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ y) Œ± x)))) (lId·¥¥ (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥)))))) ‚ü©
              (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥))))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± (((-‚ÇÄ y) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ y) Œ± x)))
                ‚â°‚ü® cong (Œª z ‚Üí (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥))))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± (z +·¥¥ ((-‚ÇÄ y) Œ± x)))) (actOn-Unit A (-‚ÇÄ y)) ‚ü©
              (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥))))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± (0·¥¥ +·¥¥ ((-‚ÇÄ y) Œ± x)))
                ‚â°‚ü® cong (Œª z ‚Üí (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥))))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± z)) (lId·¥¥ ((-‚ÇÄ y) Œ± x)) ‚ü©
              (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥))))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± ((-‚ÇÄ y) Œ± x))
                ‚â°‚ü® cong (Œª z ‚Üí (y Œ± (u +·¥¥ (v Œ± z))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± ((-‚ÇÄ y) Œ± x))) (actOn-Unit A (-‚ÇÄ ((f u) +‚ÇÄ v))) ‚ü©
              (y Œ± (u +·¥¥ (v Œ± 0·¥¥))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± ((-‚ÇÄ y) Œ± x))
                ‚â°‚ü® cong (Œª z ‚Üí (y Œ± (u +·¥¥ z)) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± ((-‚ÇÄ y) Œ± x))) (actOnUnit A v) ‚ü©
              (y Œ± (u +·¥¥ 0·¥¥)) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± ((-‚ÇÄ y) Œ± x))
                ‚â°‚ü® cong (Œª z ‚Üí (y Œ± z) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± ((-‚ÇÄ y) Œ± x))) (rId·¥¥ u) ‚ü©
              (y Œ± u) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± ((-‚ÇÄ y) Œ± x))
                ‚â°‚ü® cong (Œª z ‚Üí (y Œ± u) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ z)) Œ± ((-‚ÇÄ y) Œ± x))) (invDistr G‚ÇÄ (f u) v) ‚ü©
              (y Œ± u) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ ((-‚ÇÄ v) +‚ÇÄ (-‚ÇÄ (f u))))) Œ± ((-‚ÇÄ y) Œ± x))
                ‚â°‚ü® cong (Œª z ‚Üí (y Œ± u) +·¥¥ ((y +‚ÇÄ z) Œ± ((-‚ÇÄ y) Œ± x))) (assoc-rCancel G‚ÇÄ v (-‚ÇÄ f u)) ‚ü©
              (y Œ± u) +·¥¥ ((y +‚ÇÄ (-‚ÇÄ (f u))) Œ± ((-‚ÇÄ y) Œ± x))
                ‚â°‚ü® cong ((y Œ± u) +·¥¥_) (sym (Œ±-assoc (y +‚ÇÄ (-‚ÇÄ f u)) (-‚ÇÄ y) x)) ‚ü©
              (y Œ± u) +·¥¥ (((y +‚ÇÄ (-‚ÇÄ (f u))) +‚ÇÄ (-‚ÇÄ y)) Œ± x)
                ‚â°‚ü® cong (Œª z ‚Üí (y Œ± u) +·¥¥ (((y +‚ÇÄ z) +‚ÇÄ (-‚ÇÄ y)) Œ± x)) (sym (mapInv œÜ u)) ‚ü©
              (y Œ± u) +·¥¥ (((y +‚ÇÄ (f (-·¥¥ u))) +‚ÇÄ (-‚ÇÄ y)) Œ± x)
                ‚â°‚ü® cong (Œª z ‚Üí (y Œ± u) +·¥¥ (z Œ± x)) (sym (isEqui y (-·¥¥ u))) ‚ü©
              (y Œ± u) +·¥¥ ((f (y Œ± (-·¥¥ u))) Œ± x)
                ‚â°‚ü® cong ((y Œ± u) +·¥¥_) (isPeif (y Œ± (-·¥¥ u)) x) ‚ü©
              (y Œ± u) +·¥¥ (((y Œ± (-·¥¥ u)) +·¥¥ x) +·¥¥ (-·¥¥ (y Œ± (-·¥¥ u))))
                ‚â°‚ü® cong (Œª z ‚Üí (y Œ± u) +·¥¥ ((z +·¥¥ x) +·¥¥ (-·¥¥ z))) (actOn- A y u) ‚ü©
              (y Œ± u) +·¥¥ (((-·¥¥ (y Œ± u)) +·¥¥ x) +·¥¥ (-·¥¥ (-·¥¥ (y Œ± u))))
                ‚â°‚ü® cong (Œª z ‚Üí (y Œ± u) +·¥¥ (((-·¥¥ (y Œ± u)) +·¥¥ x) +·¥¥ z)) (invInvo H (y Œ± u)) ‚ü©
              (y Œ± u) +·¥¥ (((-·¥¥ (y Œ± u)) +·¥¥ x) +·¥¥ (y Œ± u))
                ‚â°‚ü® assoc-assoc H (y Œ± u) (-·¥¥ (y Œ± u)) x (y Œ± u) ‚ü©
              (((y Œ± u) +·¥¥ (-·¥¥ (y Œ± u))) +·¥¥ x) +·¥¥ (y Œ± u)
                ‚â°‚ü® cong (_+·¥¥ (y Œ± u)) (rCancel-lId H (y Œ± u) x) ‚ü©
              x +·¥¥ (y Œ± u) ‚àé

          r' = ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) +‚ÇÄ ((-‚ÇÄ y) +‚ÇÄ y)) +‚ÇÄ (f u +‚ÇÄ v)
                 ‚â°‚ü® cong (_+‚ÇÄ (f u +‚ÇÄ v)) (lCancel-rId G‚ÇÄ (y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) y) ‚ü©
               (y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) +‚ÇÄ (f u +‚ÇÄ v)
                 ‚â°‚ü® cong (Œª z ‚Üí (y +‚ÇÄ (v +‚ÇÄ z)) +‚ÇÄ (f u +‚ÇÄ v)) (invDistr G‚ÇÄ (f u) v) ‚ü©
               (y +‚ÇÄ (v +‚ÇÄ ((-‚ÇÄ v) +‚ÇÄ (-‚ÇÄ f u)))) +‚ÇÄ (f u +‚ÇÄ v)
                 ‚â°‚ü® cong (Œª z ‚Üí (y +‚ÇÄ z) +‚ÇÄ (f u +‚ÇÄ v)) (assoc-rCancel G‚ÇÄ v (-‚ÇÄ f u)) ‚ü©
               (y +‚ÇÄ (-‚ÇÄ f u)) +‚ÇÄ (f u +‚ÇÄ v)
                 ‚â°‚ü® assoc‚Åª-assocr-lCancel-lId G‚ÇÄ y (f u) v ‚ü©
               y +‚ÇÄ v ‚àé

          q = ((is b +‚ÇÅ (a +‚ÇÅ -it a)) +‚ÇÅ (-is b +‚ÇÅ b)) +‚ÇÅ it a
                ‚â°‚ü® refl ‚ü©
              ((0·¥¥ +·¥¥ (y Œ± (u +·¥¥ (v Œ± ((-‚ÇÄ ((f u) +‚ÇÄ v)) Œ± (-·¥¥ 0·¥¥)))))) +·¥¥ ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) Œ± (((-‚ÇÄ y) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ y) Œ± x)))) +·¥¥ (((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) +‚ÇÄ ((-‚ÇÄ y) +‚ÇÄ y)) Œ± 0·¥¥)
              , ((y +‚ÇÄ (v +‚ÇÄ (-‚ÇÄ (f u +‚ÇÄ v)))) +‚ÇÄ ((-‚ÇÄ y) +‚ÇÄ y)) +‚ÇÄ (f u +‚ÇÄ v)
                ‚â°‚ü® Œ£PathP (r , r') ‚ü©
              x +·¥¥ (y Œ± u) , y +‚ÇÄ v
                ‚â°‚ü® refl ‚ü©
              b +‚ÇÅ a ‚àé
    RelIso.inv (ùíÆ·¥∞-‚ô≠iso-XModule-Strict2Group (((((G‚ÇÄ , H) , _Œ±_) , isAct) , œÜ) , isEqui)) ‚ô≠isPeif h h' = q
      where
        open GroupNotationH H
        open GroupNotation‚ÇÄ G‚ÇÄ
        f = GroupHom.fun œÜ
        A = groupaction _Œ±_ isAct
        open ActionNotationŒ± A using (Œ±-assoc ; Œ±-hom ; Œ±-id)

        SG = F (((((G‚ÇÄ , H) , _Œ±_) , isAct) , œÜ) , isEqui)
        -- H‚ãäG : Group {‚Ñì‚Ñì'}
        H‚ãäG = snd (fst (fst (fst (fst SG))))
        open GroupNotation‚ÇÅ H‚ãäG
        -- œÉ : GroupHom H‚ãäG G‚ÇÄ
        œÉ = snd (snd (fst (fst (fst SG))))
        -- Œπ : GroupHom G‚ÇÄ H‚ãäG
        Œπ = fst (snd (fst (fst (fst SG))))
        -- œÑ : GroupHom H‚ãäG G‚ÇÄ
        œÑ = snd (fst SG)
        t = GroupHom.fun œÑ
        s = GroupHom.fun œÉ
        ùíæ = GroupHom.fun Œπ
        is = Œª (h : ‚ü® H‚ãäG ‚ü©) ‚Üí ùíæ (s h)
        -is = Œª (h : ‚ü® H‚ãäG ‚ü©) ‚Üí -‚ÇÅ ùíæ (s h)
        it = Œª (h : ‚ü® H‚ãäG ‚ü©) ‚Üí ùíæ (t h)
        -it = Œª (h : ‚ü® H‚ãäG ‚ü©) ‚Üí -‚ÇÅ ùíæ (t h)
        -h = -·¥¥ h
        abstract
          r‚ÇÅ = ((0·¥¥ +·¥¥ (0‚ÇÄ Œ± (-h +·¥¥ (0‚ÇÄ Œ± ((-‚ÇÄ ((f -h) +‚ÇÄ 0‚ÇÄ)) Œ± (-·¥¥ 0·¥¥)))))) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h')))) +·¥¥ (((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ ((f -h) +‚ÇÄ 0‚ÇÄ)))) +‚ÇÄ ((-‚ÇÄ 0‚ÇÄ) +‚ÇÄ 0‚ÇÄ)) Œ± 0·¥¥)
                 ‚â°‚ü® cong fst (‚ô≠isPeif (-h , 0‚ÇÄ) (h' , 0‚ÇÄ)) ‚ü©
               h' +·¥¥ (0‚ÇÄ Œ± -h)
                 ‚â°‚ü® cong (h' +·¥¥_) (Œ±-id -h) ‚ü©
               h' +·¥¥ -h ‚àé

          r‚ÇÇ = ((0·¥¥ +·¥¥ (0‚ÇÄ Œ± (-h +·¥¥ (0‚ÇÄ Œ± ((-‚ÇÄ ((f -h) +‚ÇÄ 0‚ÇÄ)) Œ± (-·¥¥ 0·¥¥)))))) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h'))))
                  +·¥¥ (((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ ((f -h) +‚ÇÄ 0‚ÇÄ)))) +‚ÇÄ ((-‚ÇÄ 0‚ÇÄ) +‚ÇÄ 0‚ÇÄ)) Œ± 0·¥¥)
                  ‚â°‚ü® cong (((0·¥¥ +·¥¥ (0‚ÇÄ Œ± (-h +·¥¥ (0‚ÇÄ Œ± ((-‚ÇÄ ((f -h) +‚ÇÄ 0‚ÇÄ)) Œ± (-·¥¥ 0·¥¥)))))) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h')))) +·¥¥_)
                          (actOnUnit A (((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ ((f -h) +‚ÇÄ 0‚ÇÄ)))) +‚ÇÄ ((-‚ÇÄ 0‚ÇÄ) +‚ÇÄ 0‚ÇÄ))))
                     ‚àô rId·¥¥ _ ‚ü©
                (0·¥¥ +·¥¥ (0‚ÇÄ Œ± (-h +·¥¥ (0‚ÇÄ Œ± ((-‚ÇÄ ((f -h) +‚ÇÄ 0‚ÇÄ)) Œ± (-·¥¥ 0·¥¥)))))) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h')))
                  ‚â°‚ü® cong (Œª z ‚Üí (0·¥¥ +·¥¥ (0‚ÇÄ Œ± (-h +·¥¥ (0‚ÇÄ Œ± z)))) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h'))))
                          (actOn-Unit A (-‚ÇÄ ((f -h) +‚ÇÄ 0‚ÇÄ))) ‚ü©
                (0·¥¥ +·¥¥ (0‚ÇÄ Œ± (-h +·¥¥ (0‚ÇÄ Œ± 0·¥¥)))) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h')))
                  ‚â°‚ü® cong (Œª z ‚Üí (0·¥¥ +·¥¥ (0‚ÇÄ Œ± (-h +·¥¥ z))) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h'))))
                          (actOnUnit A 0‚ÇÄ) ‚ü©
                (0·¥¥ +·¥¥ (0‚ÇÄ Œ± (-h +·¥¥ 0·¥¥))) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h')))
                  ‚â°‚ü® cong (Œª z ‚Üí (0·¥¥ +·¥¥ (0‚ÇÄ Œ± z)) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h'))))
                          (rId·¥¥ -h) ‚ü©
                (0·¥¥ +·¥¥ (0‚ÇÄ Œ± -h)) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h')))
                  ‚â°‚ü® cong (Œª z ‚Üí (0·¥¥ +·¥¥ z) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h'))))
                          (Œ±-id -h) ‚ü©
                (0·¥¥ +·¥¥ -h) +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h')))
                  ‚â°‚ü® cong (_+·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h'))))
                          (lId·¥¥ -h) ‚ü©
                -h +·¥¥ ((0‚ÇÄ +‚ÇÄ (0‚ÇÄ +‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)))) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h')))
                  ‚â°‚ü® cong (Œª z ‚Üí -h +·¥¥ (z Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h'))))
                          (lId-lId G‚ÇÄ (-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ))) ‚ü©
                -h +·¥¥ ((-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)) Œ± (((-‚ÇÄ 0‚ÇÄ) Œ± (-·¥¥ 0·¥¥)) +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h')))
                  ‚â°‚ü® cong (Œª z ‚Üí -h +·¥¥ ((-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)) Œ± (z +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h'))))
                          (actOn-Unit A (-‚ÇÄ 0‚ÇÄ)) ‚ü©
                -h +·¥¥ ((-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)) Œ± (0·¥¥ +·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h')))
                  ‚â°‚ü® cong (Œª z ‚Üí -h +·¥¥ ((-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)) Œ± z))
                          (lId·¥¥ ((-‚ÇÄ 0‚ÇÄ) Œ± h')) ‚ü©
                -h +·¥¥ ((-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)) Œ± ((-‚ÇÄ 0‚ÇÄ) Œ± h'))
                  ‚â°‚ü® cong (Œª z ‚Üí -h +·¥¥ ((-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)) Œ± z))
                          (-idAct A h') ‚ü©
                -h +·¥¥ ((-‚ÇÄ (f -h +‚ÇÄ 0‚ÇÄ)) Œ± h')
                  ‚â°‚ü® cong (Œª z ‚Üí -h +·¥¥ ((-‚ÇÄ z) Œ± h'))
                          (rId‚ÇÄ (f -h)) ‚ü©
                -h +·¥¥ ((-‚ÇÄ (f -h)) Œ± h')
                  ‚â°‚ü® cong (Œª z ‚Üí -h +·¥¥ (z Œ± h'))
                          (cong -‚ÇÄ_ (mapInv œÜ h) ‚àô invInvo G‚ÇÄ (f h)) ‚ü©
                -h +·¥¥ (f h Œ± h') ‚àé

          q = f h Œ± h'
                ‚â°‚ü® sym (lId·¥¥ (f h Œ± h'))
                   ‚àô‚àô sym (cong (_+·¥¥ (f h Œ± h')) (rCancel·¥¥ h))
                   ‚àô‚àô sym (assoc·¥¥ h -h (f h Œ± h')) ‚ü©
              h +·¥¥ (-h +·¥¥ (f h Œ± h'))
                ‚â°‚ü® cong (h +·¥¥_)
                        (sym r‚ÇÇ ‚àô r‚ÇÅ) ‚ü©
              h +·¥¥ (h' +·¥¥ -h)
                ‚â°‚ü® assoc·¥¥ h h' -h ‚ü©
              (h +·¥¥ h') +·¥¥ (-·¥¥ h) ‚àé

    RelIso.leftInv (ùíÆ·¥∞-‚ô≠iso-XModule-Strict2Group _) _ = tt
    RelIso.rightInv (ùíÆ·¥∞-‚ô≠iso-XModule-Strict2Group _) _ = tt


  IsoXModulePeifferGraph : Iso (XModule ‚Ñì ‚Ñì‚Ñì') (PeifferGraph ‚Ñì ‚Ñì‚Ñì')
  IsoXModulePeifferGraph = Iso‚ÜíTotalIso ‚Ñ± (ùíÆ·¥∞-XModule ‚Ñì ‚Ñì‚Ñì') (ùíÆ·¥∞-S2G ‚Ñì ‚Ñì‚Ñì') ùíÆ·¥∞-‚ô≠iso-XModule-Strict2Group
